package com.sinolife.lem.pub.util;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.activemq.filter.function.inListFunction;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.sinolife.lem.LemApplicaction;
import com.sinolife.lem.pub.mapper.ActivityInfoMapper;
import com.sinolife.lem.pub.service.impl.ActiGoodsServiceImpl;

import redis.clients.jedis.Jedis;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = LemApplicaction.class)
public class RedisClientTest {
	
	
	@Autowired
	private RedisClient redisClient;
	
	@Autowired
	private ActivityInfoMapper activityInfoMapper;
	
	@Autowired
	private ActiGoodsServiceImpl actiGoodsServiceImpl;
	
	
	@Test
	public void getObjectValByKey() throws InterruptedException {
//		Jedis jedis = redisClient.getJedis();
//		String key = "lemb_redis_lock_test";
//		String value = "1";
//		long startTime = System.currentTimeMillis();
//		System.out.println(RedisDistributedLock.tryLock( key, value, 10));
//		System.out.println(System.currentTimeMillis() - startTime);
//		if (RedisDistributedLock.tryLockWithTimeout(key, value, 10, 10, TimeUnit.SECONDS)) {
//			System.out.println(System.currentTimeMillis() - startTime);
//			System.out.println("getLock");
//		} else {
//			System.out.println("fail to get lock");
//		}
	}
	
	/**
	 * 原子释放锁脚本 
	 */
	private static final String SCRIPT = "if redis.call('get', KEYS[1]) == ARGV[1] then "
			+ "return redis.call('del', KEYS[1]) else return 0 end";
	
	@Test
	public void evalSha() {
		Jedis jedis = redisClient.getJedis();
		try {
			Object evalsha = jedis.evalsha(SCRIPT);
			System.out.println(evalsha);
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			jedis.close();
		}
	}
	
	@Test
	public void test11() throws InterruptedException {
//		String key = "lemb_key_test";
//		CyclicBarrier cyclicBarrier = new CyclicBarrier(5000);
//		for (int i = 0; i < 5000; i++) {
//			int j = i;
//			new Thread(() -> {
//				try {
//					cyclicBarrier.await();
//				} catch (Exception e1) {
//					// TODO Auto-generated catch block
//					e1.printStackTrace();
//				}
//				while (!RedisDistributedLock.tryLock(key, "" + j, 1)) {
//					
//				}
//				try {
//					Thread.sleep(500);
//					System.err.println("i" + j + " : " + LocalDateTime.now());
//				} catch (Exception e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} finally {
//					RedisDistributedLock.unlock(key, "" + j);
//				}
//			}).start();
//		}
//		try {
//			Thread.sleep(20000000);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		/**
		 * 原子释放锁脚本 
		 */
//		 String SCRIPT = "ttl = redis.call('ttl', KEYS[1]) "
//		 		+ "if redis.call('get', KEYS[1]) == ARGV[1] and ttl > 0 then "
//				+ "return redis.call('pexpire', ARGV[2] + ttl) else return 0 end";
//		
//		Jedis jedis = redisClient.getJedis();
//		System.out.println(RedisDistributedLock.tryLock("LEMB_LOCK", "1", 10));
//		Thread.sleep(1250);
//		Long pttl = jedis.pttl("LEMB_LOCK");
//		System.err.println(pttl);
//		Thread.sleep(20000);
//		System.err.println("pexpire: " + jedis.pexpire("LEMB_LOCK", 10 * 1000 + pttl));
//		pttl = jedis.pttl("LEMB_LOCK");
//		System.err.println(pttl);
	}
	
	
	@Test
	public void test3() {
		CyclicBarrier cyclicBarrier = new CyclicBarrier(10);
		String key = "LEMB_KEY11";
		String value = "1";
		for (int i = 0; i < 10; i++) {
			new Thread(() -> {
					try {
						cyclicBarrier.await();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					if (RedisDistributedLock.tryLock(key, value, 10)) {
						System.err.println("get lock: " + new Date().getTime());
						RedisDistributedLock.unlock(key, value);
						return;
					}
					System.err.println("fail: " + new Date().getTime());
			}).start();
		}
	}
	
	/**
	 * 原子释放锁脚本 
	 */
	private static final String SCRIPT_TTL = "local a = redis.call('pttl', KEYS[1]) "
			+ "if a > 0 and redis.call('get', KEYS[1]) == ARGV[1] "
			+ "then return redis.call('pexpire', KEYS[1], ARGV[2] + a) else return 0 end";
	
	
	@Test
	public void test4() throws InterruptedException {
		ReentrantLock lock = new ReentrantLock();
		Jedis jedis = redisClient.getJedis();
		String key = "LEMB_KEY11";
		String value = "1";
		RedisDistributedLock.tryLock(key, value, 10);
		System.err.println("lock:" + LocalDateTime.now() );
		Object eval = jedis.eval(SCRIPT_TTL, Collections.singletonList(key), Arrays.asList(value, "10000"));
		System.out.println("1".equals(eval));
		System.out.println(1 == (long)eval);
//		try {
//			for (int i = 0; i < 10; i++) {
//				Thread.sleep(3000); 
//				System.err.println("add");
//				System.out.println(jedis.eval(SCRIPT_TTL, Collections.singletonList(key), Arrays.asList(value, "10000")));
//			}
//		} catch (Exception e) {
//			System.err.println(e);
//		}
		
	}
	
	@Test
	public void test5() {
		redisTest(0);
	}
	
	private void redisTest(int count) {
		if(count == 5) {
			return ;
		}
		
		String key = "LEMB_REDIS_LOCK_TEST";
		String value = "111";
		if (!RedisDistributedLock.tryLock(key, value, 3)) {
			return;
		}
		try {
			count++;
			System.out.println(count);
			redisTest(count);
		} finally {
			RedisDistributedLock.unlock(key, value);
		}
	}
	
	private AtomicInteger success = new AtomicInteger();
	private AtomicInteger fail = new AtomicInteger();
	
	@Test
	public void test6() {
		CyclicBarrier cyclicBarrier = new CyclicBarrier(1000);
		for (int i = 0; i < 1000; i++) {
			int j = i;
			Thread thread = new Thread(() -> sleepTest(cyclicBarrier, j));
			thread.setName("threa" + j);
			thread.start();
		}
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.err.println("sucess11: " + success);
		System.err.println("fail11: " + fail);
		System.err.println("thread11: " + RedisDistributedLock.QUEUE.size());
	}
	
	public void sleepTest(CyclicBarrier cyclicBarrier, int i) {
		try {
			String key = "lemb_redis_test";
			cyclicBarrier.await();
			boolean tryLockWithTimeout = RedisDistributedLock.tryLockWithTimeout(key, "" + i, 10, 5, TimeUnit.SECONDS);
			Thread.sleep(3);
			if (tryLockWithTimeout) {
				System.err.println("success: " + i + "...->..." + LocalDateTime.now());
				RedisDistributedLock.unlock(key, "" + i);
				success.addAndGet(1);
				return ;
			}
			fail.addAndGet(1);
			System.err.println("fail: " + i + "...->..." + LocalDateTime.now());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		Thread thread = new Thread(() -> {
			try {
				int count = 0;
				long i = 0;
				while(true) {
					i++;
					if (i % 1000000000 == 0) {
						count++;
						if (count > 10) {
							if (Thread.currentThread().isInterrupted()) {
								System.err.println("111: " + Thread.currentThread().isInterrupted());
								System.err.println("first: " + Thread.currentThread().interrupted());
								System.err.println("second: " + Thread.currentThread().interrupted());
								return;
							}
						}
						System.err.println("1");
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		thread.start();
		thread.interrupt();
//		System.err.println("sleep");
//		try {
//			Thread.sleep(10000);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
}
